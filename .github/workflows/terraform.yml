name: 'Terraform and Deploy'

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
      - 'alma_item_checks_webhook_service/**'
      - 'pyproject.toml'
      - 'alembic/**'
      - 'function_app.py'
      - '.github/workflows/terraform.yml'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    env:
      TF_VAR_shared_project_resource_group_name: ${{ secrets.SHARED_PROJECT_RESOURCE_GROUP_NAME }}
      TF_VAR_shared_storage_account_name: ${{ secrets.SHARED_STORAGE_ACCOUNT_NAME }}
      TF_VAR_fetch_queue_name: ${{ secrets.FETCH_QUEUE_NAME }}
      TF_VAR_asp_resource_group_name: ${{ secrets.ASP_RESOURCE_GROUP_NAME }}
      TF_VAR_app_service_plan_name: ${{ secrets.APP_SERVICE_PLAN_NAME }}
      TF_VAR_log_analytics_workspace_name: ${{ secrets.LOG_ANALYTICS_WORKSPACE_NAME }}
      TF_VAR_law_resource_group_name: ${{ secrets.LAW_RESOURCE_GROUP_NAME }}
      TF_VAR_webhook_secret: ${{ secrets.WEBHOOK_SECRET }}
      ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
      ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }}

    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3

      - name: 'Setup Terraform'
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.8.0'

      - name: 'Login to Azure'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 'Get Runner IP'
        id: ip
        uses: haythem/public-ip@v1.3

      - name: 'Terraform Init'
        run: |
          # Unset SP credentials to force backend auth via Access Key
          unset ARM_CLIENT_ID
          unset ARM_CLIENT_SECRET
          unset ARM_TENANT_ID
          unset ARM_SUBSCRIPTION_ID
          terraform -chdir=terraform init \
            -backend-config="resource_group_name=${{ secrets.TF_STATE_RESOURCE_GROUP_NAME }}" \
            -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT_NAME }}" \
            -backend-config="container_name=${{ secrets.TF_STATE_CONTAINER_NAME }}" \
            -backend-config="key=aicwebhookserviceterraform.tfstate"

      - name: 'Terraform Validate'
        run: terraform -chdir=terraform validate

      - name: 'Terraform Apply'
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform -chdir=terraform apply -auto-approve

  build:
    runs-on: ubuntu-latest
    name: Build
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3

      - name: 'Install Poetry'
        uses: snok/install-poetry@v1

      - name: 'Configure Poetry to build locally'
        run: poetry config virtualenvs.in-project true

      - name: 'Build with Poetry'
        run: poetry install --without dev

      - name: 'Construct deployment artifact'
        run: |
          mkdir -p deployment_package/.python_packages/lib/site-packages
          cp -r ./.venv/lib/python3.12/site-packages/* deployment_package/.python_packages/lib/site-packages/
          cp function_app.py host.json deployment_package/
          cp -r alembic alma_item_checks_webhook_service deployment_package/

      - name: 'Zip artifact for deployment'
        run: |
          cd deployment_package
          zip -r ../python-app.zip .

      - name: 'Upload artifact'
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: python-app.zip

  deploy:
    runs-on: ubuntu-latest
    name: Deploy to Stage
    needs: [build, terraform]
    env:
      FUNCTION_APP_NAME: "aic-webhook-service"
    steps:
      - name: 'Download artifact'
        uses: actions/download-artifact@v4
        with:
          name: python-app

      - name: 'Login to Azure'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 'Deploy to Azure Functions'
        uses: Azure/functions-action@v1
        with:
          app-name: "${{ env.FUNCTION_APP_NAME }}"
          slot-name: 'stage'
          package: 'python-app.zip'
        env:
          RESOURCE_GROUP_NAME: ${{ secrets.RESOURCE_GROUP_NAME }}
