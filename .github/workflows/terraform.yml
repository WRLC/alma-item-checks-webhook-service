name: 'Terraform CI'

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform.yml'

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3

      - name: 'Setup Terraform'
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.8.0'

      - name: 'Login to Azure'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 'Get Runner IP'
        id: ip
        uses: haythem/public-ip@v1.3

      - name: 'Add Firewall Rule'
        run: |
          az mysql flexible-server firewall-rule create \
            --resource-group ${{ secrets.MYSQL_RESOURCE_GROUP_NAME }} \
            --name ${{ secrets.MYSQL_SERVER_NAME }} \
            --rule-name "github-actions-runner" \
            --start-ip-address ${{ steps.ip.outputs.ipv4 }} \
            --end-ip-address ${{ steps.ip.outputs.ipv4 }}

      - name: 'Terraform Init'
        run: |
          # Unset SP credentials to force backend auth via Access Key
          unset ARM_CLIENT_ID
          unset ARM_CLIENT_SECRET
          unset ARM_TENANT_ID
          unset ARM_SUBSCRIPTION_ID
          terraform -chdir=terraform init \
            -backend-config="resource_group_name=${{ secrets.TF_STATE_RESOURCE_GROUP_NAME }}" \
            -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT_NAME }}" \
            -backend-config="container_name=${{ secrets.TF_STATE_CONTAINER_NAME }}" \
            -backend-config="key=terraform.tfstate"
        env:
          ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }}

      - name: 'Terraform Validate'
        run: terraform -chdir=terraform validate
        env:
          ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }}

      - name: 'Terraform Plan'
        run: terraform -chdir=terraform plan
        env:
          TF_VAR_service_name: ${{ secrets.SERVICE_NAME }}
          TF_VAR_resource_group_name: ${{ secrets.RESOURCE_GROUP_NAME }}
          TF_VAR_mysql_resource_group_name: ${{ secrets.MYSQL_RESOURCE_GROUP_NAME }}
          TF_VAR_app_service_plan_name: ${{ secrets.APP_SERVICE_PLAN_NAME }}
          TF_VAR_location: ${{ secrets.LOCATION }}
          TF_VAR_mysql_server_name: ${{ secrets.MYSQL_SERVER_NAME }}
          TF_VAR_mysql_admin_username: ${{ secrets.MYSQL_ADMIN_USERNAME }}
          TF_VAR_mysql_admin_password: ${{ secrets.MYSQL_ADMIN_PASSWORD }}
          TF_VAR_function_app_name: ${{ secrets.FUNCTION_APP_NAME }}
          TF_VAR_webhook_secret: ${{ secrets.WEBHOOK_SECRET }}
          ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
          ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }}

      - name: 'Terraform Apply'
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform -chdir=terraform apply -auto-approve
        env:
          TF_VAR_service_name: ${{ secrets.SERVICE_NAME }}
          TF_VAR_resource_group_name: ${{ secrets.RESOURCE_GROUP_NAME }}
          TF_VAR_mysql_resource_group_name: ${{ secrets.MYSQL_RESOURCE_GROUP_NAME }}
          TF_VAR_app_service_plan_name: ${{ secrets.APP_SERVICE_PLAN_NAME }}
          TF_VAR_location: ${{ secrets.LOCATION }}
          TF_VAR_mysql_server_name: ${{ secrets.MYSQL_SERVER_NAME }}
          TF_VAR_mysql_admin_username: ${{ secrets.MYSQL_ADMIN_USERNAME }}
          TF_VAR_mysql_admin_password: ${{ secrets.MYSQL_ADMIN_PASSWORD }}
          TF_VAR_function_app_name: ${{ secrets.FUNCTION_APP_NAME }}
          TF_VAR_webhook_secret: ${{ secrets.WEBHOOK_SECRET }}
          ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
          ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }}

      - name: 'Remove Firewall Rule'
        if: always()
        run: |
          az mysql flexible-server firewall-rule delete \
            --resource-group ${{ secrets.MYSQL_RESOURCE_GROUP_NAME }} \
            --name ${{ secrets.MYSQL_SERVER_NAME }} \
            --rule-name "github-actions-runner" \
            --yes
