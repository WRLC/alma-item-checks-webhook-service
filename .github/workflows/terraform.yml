name: 'Terraform and Deploy'

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
      - 'alma_item_checks_webhook_service/**'
      - 'pyproject.toml'
      - 'function_app.py'
      - '.github/workflows/terraform.yml'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  id-token: write # Required for OIDC authentication
  contents: read  # Required to check out the repository

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    env: # Terraform input variables are passed to all steps
      TF_VAR_service_name: ${{ secrets.SERVICE_NAME }}
      TF_VAR_shared_project_resource_group_name: ${{ secrets.SHARED_PROJECT_RESOURCE_GROUP_NAME }}
      TF_VAR_shared_storage_account_name: ${{ secrets.SHARED_STORAGE_ACCOUNT_NAME }}
      TF_VAR_fetch_queue_name: ${{ secrets.FETCH_QUEUE_NAME }}
      TF_VAR_asp_resource_group_name: ${{ secrets.ASP_RESOURCE_GROUP_NAME }}
      TF_VAR_app_service_plan_name: ${{ secrets.APP_SERVICE_PLAN_NAME }}
      TF_VAR_log_analytics_workspace_name: ${{ secrets.LOG_ANALYTICS_WORKSPACE_NAME }}
      TF_VAR_law_resource_group_name: ${{ secrets.LAW_RESOURCE_GROUP_NAME }}
      TF_VAR_webhook_secret: ${{ secrets.WEBHOOK_SECRET }}

    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3

      - name: 'Setup Terraform'
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.8.0'

      - name: 'Login to Azure'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_AD_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_AD_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: 'Terraform Init'
        run: |
          terraform -chdir=terraform init \
            -backend-config="resource_group_name=${{ secrets.TF_STATE_RESOURCE_GROUP_NAME }}" \
            -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT_NAME }}" \
            -backend-config="container_name=${{ secrets.TF_STATE_CONTAINER_NAME }}" \
            -backend-config="key=${{ secrets.TF_STATE_KEY }}" \
            -backend-config="use_oidc=true" \
            -backend-config="client_id=${{ secrets.AZURE_AD_CLIENT_ID }}" \
            -backend-config="tenant_id=${{ secrets.AZURE_AD_TENANT_ID }}" \
            -backend-config="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}"

      - name: 'Terraform Validate'
        run: terraform -chdir=terraform validate

      - name: 'Terraform Apply - Step 1: Create App Identity'
        run: |
          terraform -chdir=terraform apply -auto-approve \
            -target=azurerm_linux_function_app.function_app

      - name: "Wait for Azure to Propagate App Identity"
        run: sleep 60

      - name: 'Terraform Apply - Step 2: Create Slot Identity'
        run: |
          terraform -chdir=terraform apply -auto-approve \
            -target=azurerm_linux_function_app_slot.staging_slot

      - name: "Wait for Azure to Propagate Slot Identity"
        run: sleep 60

      - name: 'Terraform Plan - Step 3: Plan Remaining Changes'
        run: terraform -chdir=terraform plan -out=tfplan

      - name: 'Terraform Apply - Step 4: Apply Remaining Changes'
        run: terraform -chdir=terraform apply -auto-approve tfplan

  build:
    runs-on: ubuntu-latest
    name: Build
    needs: [terraform]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3

      - name: 'Install Poetry'
        uses: snok/install-poetry@v1

      - name: 'Configure Poetry to build locally'
        run: poetry config virtualenvs.in-project true

      - name: 'Build with Poetry'
        run: poetry install --without dev

      - name: 'Construct deployment artifact'
        run: |
          mkdir -p deployment_package/.python_packages/lib/site-packages
          cp -r ./.venv/lib/python3.12/site-packages/* deployment_package/.python_packages/lib/site-packages/
          cp function_app.py host.json deployment_package/
          cp -r alma_item_checks_webhook_service deployment_package/

      - name: 'Zip artifact for deployment'
        run: |
          cd deployment_package
          zip -r ../python-app.zip .

      - name: 'Upload artifact'
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: python-app.zip

  deploy:
    runs-on: ubuntu-latest
    name: Deploy to Stage
    needs: [build]
    steps:
      - name: 'Download artifact'
        uses: actions/download-artifact@v4
        with:
          name: python-app

      - name: 'Login to Azure'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_AD_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_AD_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: 'Deploy to Azure Functions'
        uses: Azure/functions-action@v1
        with:
          app-name: "${{ secrets.SERVICE_NAME }}"
          slot-name: 'stage'
          package: 'python-app.zip'
