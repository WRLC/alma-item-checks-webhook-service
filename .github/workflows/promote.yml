name: 'Promote to Production'

on:
  workflow_dispatch:

jobs:
  promote:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3

      - name: 'Set up Python'
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: 'Install Poetry'
        run: |
          python -m pip install --upgrade pip
          pip install poetry

      - name: 'Configure Poetry for Private Repository'
        run: poetry config http-basic.wrlc-python __token__ ${{ secrets.AZURE_DEVOPS_PAT }}

      - name: 'Install dependencies'
        run: poetry install --without dev

      - name: 'Login to Azure'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 'Get Production Connection String'
        id: get-conn-string
        run: |
          FUNCTION_APP_NAME="almaitemchecks-${{ secrets.SERVICE_NAME }}"
          echo "Attempting to retrieve SQLALCHEMY_CONNECTION_STRING for production slot of ${FUNCTION_APP_NAME}..."
          CONNECTION_STRING=$(az functionapp config appsettings list --name ${FUNCTION_APP_NAME} --resource-group ${{ secrets.RESOURCE_GROUP_NAME }} --query "[?name=='SQLALCHEMY_CONNECTION_STRING'].value" -o tsv)

          if [ -z "$CONNECTION_STRING" ]; then
            echo "::error::Could not find SQLALCHEMY_CONNECTION_STRING in the production slot's app settings."
            exit 1
          fi

          echo "Setting connection string as step output..."
          echo "connection_string=$CONNECTION_STRING" >> $GITHUB_OUTPUT
        env:
          RESOURCE_GROUP_NAME: ${{ secrets.RESOURCE_GROUP_NAME }}
          SERVICE_NAME: ${{ secrets.SERVICE_NAME }}

      - name: 'Run Production Database Migrations'
        run: |
          echo "Running Alembic migrations on production database..."
          poetry run alembic upgrade head
        env:
          SQLALCHEMY_CONNECTION_STRING: ${{ steps.get-conn-string.outputs.connection_string }}

      - name: 'Perform Slot Swap'
        run: |
          FUNCTION_APP_NAME="almaitemchecks-${{ secrets.SERVICE_NAME }}"
          echo "Swapping 'stage' slot into production for ${FUNCTION_APP_NAME}..."
          az functionapp deployment slot swap --name ${FUNCTION_APP_NAME} --resource-group ${{ secrets.RESOURCE_GROUP_NAME }} --slot stage --target-slot production
        env:
          RESOURCE_GROUP_NAME: ${{ secrets.RESOURCE_GROUP_NAME }}
          SERVICE_NAME: ${{ secrets.SERVICE_NAME }}
